// Generated by gencpp from file futek_data_logger/z_pos.msg
// DO NOT EDIT!


#ifndef FUTEK_DATA_LOGGER_MESSAGE_Z_POS_H
#define FUTEK_DATA_LOGGER_MESSAGE_Z_POS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace futek_data_logger
{
template <class ContainerAllocator>
struct z_pos_
{
  typedef z_pos_<ContainerAllocator> Type;

  z_pos_()
    : z_pos(0.0)  {
    }
  z_pos_(const ContainerAllocator& _alloc)
    : z_pos(0.0)  {
  (void)_alloc;
    }



   typedef float _z_pos_type;
  _z_pos_type z_pos;





  typedef boost::shared_ptr< ::futek_data_logger::z_pos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::futek_data_logger::z_pos_<ContainerAllocator> const> ConstPtr;

}; // struct z_pos_

typedef ::futek_data_logger::z_pos_<std::allocator<void> > z_pos;

typedef boost::shared_ptr< ::futek_data_logger::z_pos > z_posPtr;
typedef boost::shared_ptr< ::futek_data_logger::z_pos const> z_posConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::futek_data_logger::z_pos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::futek_data_logger::z_pos_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::futek_data_logger::z_pos_<ContainerAllocator1> & lhs, const ::futek_data_logger::z_pos_<ContainerAllocator2> & rhs)
{
  return lhs.z_pos == rhs.z_pos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::futek_data_logger::z_pos_<ContainerAllocator1> & lhs, const ::futek_data_logger::z_pos_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace futek_data_logger

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::futek_data_logger::z_pos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::futek_data_logger::z_pos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::futek_data_logger::z_pos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::futek_data_logger::z_pos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::futek_data_logger::z_pos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::futek_data_logger::z_pos_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::futek_data_logger::z_pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2b07eb162418378344d3a01a88af5f3c";
  }

  static const char* value(const ::futek_data_logger::z_pos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2b07eb1624183783ULL;
  static const uint64_t static_value2 = 0x44d3a01a88af5f3cULL;
};

template<class ContainerAllocator>
struct DataType< ::futek_data_logger::z_pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "futek_data_logger/z_pos";
  }

  static const char* value(const ::futek_data_logger::z_pos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::futek_data_logger::z_pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 z_pos\n"
;
  }

  static const char* value(const ::futek_data_logger::z_pos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::futek_data_logger::z_pos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.z_pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct z_pos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::futek_data_logger::z_pos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::futek_data_logger::z_pos_<ContainerAllocator>& v)
  {
    s << indent << "z_pos: ";
    Printer<float>::stream(s, indent + "  ", v.z_pos);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUTEK_DATA_LOGGER_MESSAGE_Z_POS_H
