// Generated by gencpp from file hand_interface/flex_sns.msg
// DO NOT EDIT!


#ifndef HAND_INTERFACE_MESSAGE_FLEX_SNS_H
#define HAND_INTERFACE_MESSAGE_FLEX_SNS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hand_interface
{
template <class ContainerAllocator>
struct flex_sns_
{
  typedef flex_sns_<ContainerAllocator> Type;

  flex_sns_()
    : prox1(0)
    , dist1(0)
    , prox2(0)
    , dist2(0)
    , prox3(0)
    , dist3(0)  {
    }
  flex_sns_(const ContainerAllocator& _alloc)
    : prox1(0)
    , dist1(0)
    , prox2(0)
    , dist2(0)
    , prox3(0)
    , dist3(0)  {
  (void)_alloc;
    }



   typedef int32_t _prox1_type;
  _prox1_type prox1;

   typedef int32_t _dist1_type;
  _dist1_type dist1;

   typedef int32_t _prox2_type;
  _prox2_type prox2;

   typedef int32_t _dist2_type;
  _dist2_type dist2;

   typedef int32_t _prox3_type;
  _prox3_type prox3;

   typedef int32_t _dist3_type;
  _dist3_type dist3;





  typedef boost::shared_ptr< ::hand_interface::flex_sns_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hand_interface::flex_sns_<ContainerAllocator> const> ConstPtr;

}; // struct flex_sns_

typedef ::hand_interface::flex_sns_<std::allocator<void> > flex_sns;

typedef boost::shared_ptr< ::hand_interface::flex_sns > flex_snsPtr;
typedef boost::shared_ptr< ::hand_interface::flex_sns const> flex_snsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hand_interface::flex_sns_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hand_interface::flex_sns_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hand_interface::flex_sns_<ContainerAllocator1> & lhs, const ::hand_interface::flex_sns_<ContainerAllocator2> & rhs)
{
  return lhs.prox1 == rhs.prox1 &&
    lhs.dist1 == rhs.dist1 &&
    lhs.prox2 == rhs.prox2 &&
    lhs.dist2 == rhs.dist2 &&
    lhs.prox3 == rhs.prox3 &&
    lhs.dist3 == rhs.dist3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hand_interface::flex_sns_<ContainerAllocator1> & lhs, const ::hand_interface::flex_sns_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hand_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hand_interface::flex_sns_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hand_interface::flex_sns_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hand_interface::flex_sns_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hand_interface::flex_sns_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hand_interface::flex_sns_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hand_interface::flex_sns_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hand_interface::flex_sns_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8b57bff00d9b97e6f6a22eb31c6895cc";
  }

  static const char* value(const ::hand_interface::flex_sns_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8b57bff00d9b97e6ULL;
  static const uint64_t static_value2 = 0xf6a22eb31c6895ccULL;
};

template<class ContainerAllocator>
struct DataType< ::hand_interface::flex_sns_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hand_interface/flex_sns";
  }

  static const char* value(const ::hand_interface::flex_sns_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hand_interface::flex_sns_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 prox1\n"
"int32 dist1\n"
"int32 prox2\n"
"int32 dist2\n"
"int32 prox3\n"
"int32 dist3\n"
;
  }

  static const char* value(const ::hand_interface::flex_sns_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hand_interface::flex_sns_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.prox1);
      stream.next(m.dist1);
      stream.next(m.prox2);
      stream.next(m.dist2);
      stream.next(m.prox3);
      stream.next(m.dist3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct flex_sns_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hand_interface::flex_sns_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hand_interface::flex_sns_<ContainerAllocator>& v)
  {
    s << indent << "prox1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.prox1);
    s << indent << "dist1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dist1);
    s << indent << "prox2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.prox2);
    s << indent << "dist2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dist2);
    s << indent << "prox3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.prox3);
    s << indent << "dist3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dist3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HAND_INTERFACE_MESSAGE_FLEX_SNS_H
