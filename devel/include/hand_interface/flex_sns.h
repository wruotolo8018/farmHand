// Generated by gencpp from file hand_interface/flex_sns.msg
// DO NOT EDIT!


#ifndef HAND_INTERFACE_MESSAGE_FLEX_SNS_H
#define HAND_INTERFACE_MESSAGE_FLEX_SNS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hand_interface
{
template <class ContainerAllocator>
struct flex_sns_
{
  typedef flex_sns_<ContainerAllocator> Type;

  flex_sns_()
    : curl1(0)
    , hype1(0)
    , curl2(0)
    , hype2(0)
    , curl3(0)
    , hype3(0)
    , curl4(0)
    , hype4(0)  {
    }
  flex_sns_(const ContainerAllocator& _alloc)
    : curl1(0)
    , hype1(0)
    , curl2(0)
    , hype2(0)
    , curl3(0)
    , hype3(0)
    , curl4(0)
    , hype4(0)  {
  (void)_alloc;
    }



   typedef int32_t _curl1_type;
  _curl1_type curl1;

   typedef int32_t _hype1_type;
  _hype1_type hype1;

   typedef int32_t _curl2_type;
  _curl2_type curl2;

   typedef int32_t _hype2_type;
  _hype2_type hype2;

   typedef int32_t _curl3_type;
  _curl3_type curl3;

   typedef int32_t _hype3_type;
  _hype3_type hype3;

   typedef int32_t _curl4_type;
  _curl4_type curl4;

   typedef int32_t _hype4_type;
  _hype4_type hype4;





  typedef boost::shared_ptr< ::hand_interface::flex_sns_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hand_interface::flex_sns_<ContainerAllocator> const> ConstPtr;

}; // struct flex_sns_

typedef ::hand_interface::flex_sns_<std::allocator<void> > flex_sns;

typedef boost::shared_ptr< ::hand_interface::flex_sns > flex_snsPtr;
typedef boost::shared_ptr< ::hand_interface::flex_sns const> flex_snsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hand_interface::flex_sns_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hand_interface::flex_sns_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hand_interface::flex_sns_<ContainerAllocator1> & lhs, const ::hand_interface::flex_sns_<ContainerAllocator2> & rhs)
{
  return lhs.curl1 == rhs.curl1 &&
    lhs.hype1 == rhs.hype1 &&
    lhs.curl2 == rhs.curl2 &&
    lhs.hype2 == rhs.hype2 &&
    lhs.curl3 == rhs.curl3 &&
    lhs.hype3 == rhs.hype3 &&
    lhs.curl4 == rhs.curl4 &&
    lhs.hype4 == rhs.hype4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hand_interface::flex_sns_<ContainerAllocator1> & lhs, const ::hand_interface::flex_sns_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hand_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hand_interface::flex_sns_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hand_interface::flex_sns_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hand_interface::flex_sns_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hand_interface::flex_sns_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hand_interface::flex_sns_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hand_interface::flex_sns_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hand_interface::flex_sns_<ContainerAllocator> >
{
  static const char* value()
  {
    return "57e523c8816fb6474dc2708662828753";
  }

  static const char* value(const ::hand_interface::flex_sns_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x57e523c8816fb647ULL;
  static const uint64_t static_value2 = 0x4dc2708662828753ULL;
};

template<class ContainerAllocator>
struct DataType< ::hand_interface::flex_sns_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hand_interface/flex_sns";
  }

  static const char* value(const ::hand_interface::flex_sns_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hand_interface::flex_sns_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 curl1\n"
"int32 hype1\n"
"int32 curl2\n"
"int32 hype2\n"
"int32 curl3\n"
"int32 hype3\n"
"int32 curl4\n"
"int32 hype4\n"
;
  }

  static const char* value(const ::hand_interface::flex_sns_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hand_interface::flex_sns_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.curl1);
      stream.next(m.hype1);
      stream.next(m.curl2);
      stream.next(m.hype2);
      stream.next(m.curl3);
      stream.next(m.hype3);
      stream.next(m.curl4);
      stream.next(m.hype4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct flex_sns_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hand_interface::flex_sns_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hand_interface::flex_sns_<ContainerAllocator>& v)
  {
    s << indent << "curl1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.curl1);
    s << indent << "hype1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.hype1);
    s << indent << "curl2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.curl2);
    s << indent << "hype2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.hype2);
    s << indent << "curl3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.curl3);
    s << indent << "hype3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.hype3);
    s << indent << "curl4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.curl4);
    s << indent << "hype4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.hype4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HAND_INTERFACE_MESSAGE_FLEX_SNS_H
