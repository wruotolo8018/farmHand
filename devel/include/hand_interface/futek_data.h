// Generated by gencpp from file hand_interface/futek_data.msg
// DO NOT EDIT!


#ifndef HAND_INTERFACE_MESSAGE_FUTEK_DATA_H
#define HAND_INTERFACE_MESSAGE_FUTEK_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hand_interface
{
template <class ContainerAllocator>
struct futek_data_
{
  typedef futek_data_<ContainerAllocator> Type;

  futek_data_()
    : futek1(0)
    , futek2(0)  {
    }
  futek_data_(const ContainerAllocator& _alloc)
    : futek1(0)
    , futek2(0)  {
  (void)_alloc;
    }



   typedef int32_t _futek1_type;
  _futek1_type futek1;

   typedef int32_t _futek2_type;
  _futek2_type futek2;





  typedef boost::shared_ptr< ::hand_interface::futek_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hand_interface::futek_data_<ContainerAllocator> const> ConstPtr;

}; // struct futek_data_

typedef ::hand_interface::futek_data_<std::allocator<void> > futek_data;

typedef boost::shared_ptr< ::hand_interface::futek_data > futek_dataPtr;
typedef boost::shared_ptr< ::hand_interface::futek_data const> futek_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hand_interface::futek_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hand_interface::futek_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hand_interface::futek_data_<ContainerAllocator1> & lhs, const ::hand_interface::futek_data_<ContainerAllocator2> & rhs)
{
  return lhs.futek1 == rhs.futek1 &&
    lhs.futek2 == rhs.futek2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hand_interface::futek_data_<ContainerAllocator1> & lhs, const ::hand_interface::futek_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hand_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hand_interface::futek_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hand_interface::futek_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hand_interface::futek_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hand_interface::futek_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hand_interface::futek_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hand_interface::futek_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hand_interface::futek_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bd56bb9649bdacce672aa395f41c39f2";
  }

  static const char* value(const ::hand_interface::futek_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbd56bb9649bdacceULL;
  static const uint64_t static_value2 = 0x672aa395f41c39f2ULL;
};

template<class ContainerAllocator>
struct DataType< ::hand_interface::futek_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hand_interface/futek_data";
  }

  static const char* value(const ::hand_interface::futek_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hand_interface::futek_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 futek1\n"
"int32 futek2\n"
;
  }

  static const char* value(const ::hand_interface::futek_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hand_interface::futek_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.futek1);
      stream.next(m.futek2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct futek_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hand_interface::futek_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hand_interface::futek_data_<ContainerAllocator>& v)
  {
    s << indent << "futek1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.futek1);
    s << indent << "futek2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.futek2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HAND_INTERFACE_MESSAGE_FUTEK_DATA_H
